// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mocks

import (
	entity "auth_go_hw/internal/auth/entity"
	context "context"
	reflect "reflect"
	time "time"

	v5 "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// DeleteRefreshToken mocks base method.
func (m *MockUserRepository) DeleteRefreshToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockUserRepositoryMockRecorder) DeleteRefreshToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockUserRepository)(nil).DeleteRefreshToken), ctx, token)
}

// FindRefreshToken mocks base method.
func (m *MockUserRepository) FindRefreshToken(ctx context.Context, userID string) (entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRefreshToken", ctx, userID)
	ret0, _ := ret[0].(entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRefreshToken indicates an expected call of FindRefreshToken.
func (mr *MockUserRepositoryMockRecorder) FindRefreshToken(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRefreshToken", reflect.TypeOf((*MockUserRepository)(nil).FindRefreshToken), ctx, userID)
}

// FindUserByLogin mocks base method.
func (m *MockUserRepository) FindUserByLogin(ctx context.Context, username string) (entity.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByLogin", ctx, username)
	ret0, _ := ret[0].(entity.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByLogin indicates an expected call of FindUserByLogin.
func (mr *MockUserRepositoryMockRecorder) FindUserByLogin(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByLogin", reflect.TypeOf((*MockUserRepository)(nil).FindUserByLogin), ctx, username)
}

// RegisterUser mocks base method.
func (m *MockUserRepository) RegisterUser(ctx context.Context, u entity.UserAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserRepositoryMockRecorder) RegisterUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserRepository)(nil).RegisterUser), ctx, u)
}

// SaveRefreshToken mocks base method.
func (m *MockUserRepository) SaveRefreshToken(ctx context.Context, userID, token string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", ctx, userID, token, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockUserRepositoryMockRecorder) SaveRefreshToken(ctx, userID, token, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockUserRepository)(nil).SaveRefreshToken), ctx, userID, token, expiresAt)
}

// MockCryptoPassword is a mock of CryptoPassword interface.
type MockCryptoPassword struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoPasswordMockRecorder
}

// MockCryptoPasswordMockRecorder is the mock recorder for MockCryptoPassword.
type MockCryptoPasswordMockRecorder struct {
	mock *MockCryptoPassword
}

// NewMockCryptoPassword creates a new mock instance.
func NewMockCryptoPassword(ctrl *gomock.Controller) *MockCryptoPassword {
	mock := &MockCryptoPassword{ctrl: ctrl}
	mock.recorder = &MockCryptoPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoPassword) EXPECT() *MockCryptoPasswordMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockCryptoPassword) ComparePassword(fromUser, fromDB string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", fromUser, fromDB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockCryptoPasswordMockRecorder) ComparePassword(fromUser, fromDB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockCryptoPassword)(nil).ComparePassword), fromUser, fromDB)
}

// HashPassword mocks base method.
func (m *MockCryptoPassword) HashPassword(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockCryptoPasswordMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockCryptoPassword)(nil).HashPassword), password)
}

// MockJWTManager is a mock of JWTManager interface.
type MockJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerMockRecorder
}

// MockJWTManagerMockRecorder is the mock recorder for MockJWTManager.
type MockJWTManagerMockRecorder struct {
	mock *MockJWTManager
}

// NewMockJWTManager creates a new mock instance.
func NewMockJWTManager(ctrl *gomock.Controller) *MockJWTManager {
	mock := &MockJWTManager{ctrl: ctrl}
	mock.recorder = &MockJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManager) EXPECT() *MockJWTManagerMockRecorder {
	return m.recorder
}

// GetRefreshExpiresIn mocks base method.
func (m *MockJWTManager) GetRefreshExpiresIn() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshExpiresIn")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRefreshExpiresIn indicates an expected call of GetRefreshExpiresIn.
func (mr *MockJWTManagerMockRecorder) GetRefreshExpiresIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshExpiresIn", reflect.TypeOf((*MockJWTManager)(nil).GetRefreshExpiresIn))
}

// IssueAccessToken mocks base method.
func (m *MockJWTManager) IssueAccessToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueAccessToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueAccessToken indicates an expected call of IssueAccessToken.
func (mr *MockJWTManagerMockRecorder) IssueAccessToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueAccessToken", reflect.TypeOf((*MockJWTManager)(nil).IssueAccessToken), userID)
}

// IssueRefreshToken mocks base method.
func (m *MockJWTManager) IssueRefreshToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueRefreshToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueRefreshToken indicates an expected call of IssueRefreshToken.
func (mr *MockJWTManagerMockRecorder) IssueRefreshToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueRefreshToken", reflect.TypeOf((*MockJWTManager)(nil).IssueRefreshToken), userID)
}

// VerifyToken mocks base method.
func (m *MockJWTManager) VerifyToken(tokenString string) (*v5.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(*v5.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJWTManagerMockRecorder) VerifyToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJWTManager)(nil).VerifyToken), tokenString)
}
